openapi: 3.0.3
info:
  title: Swagger X(Twitter) clone - OpenAPI 3.0
  description: |-
    This is a X(Twitter) clone Server based on the OpenAPI 3.0 specification
  contact:
    email: hoangsangho93@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.1
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:4000/

paths:
  /users/login:
    post:
      tags:
        - users
      # summary: login vào hệ thống
      description: Login vào hệ thống
      operationId: loginUser
      requestBody:
        description: Update an existent pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      responses:
        '200':
          description: 'Login success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Login success'
                  result:
                    $ref: '#/components/schemas/SuccessAuthentication'
        '500':
          description: 'Internal server error'
        '403':
          description: 'Access denied'
        '404':
          description: 'Not found'
        '422':
          description: 'Email or password is incorrect'

  /users/me:
    get:
      tags:
        - users
      # summary: 'Lấy thông tin user's
      description: 'Lấy thông tin user'
      operationId: getMe
      security:
        - BearerAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '500':
          description: 'Internal server error'
        '403':
          description: 'Access denied'
        '404':
          description: 'Not found'

  /users/register:
    post:
      tags:
        - users
      summary: 'Đăng ký tài khoản'
      description: 'Đăng ký tài khoản'
      operationId: registerUser
      requestBody:
        description: 'Resgister user'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterReqBody'
        required: true
      responses:
        '200':
          description: 'Register success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Login success'
                  result:
                    $ref: '#/components/schemas/SuccessAuthentication'
        '403':
          description: 'Access denied'
        '404':
          description: 'Not found'
        '500':
          description: 'Internal server error'

components:
  schemas:
    Login:
      type: object
      properties:
        email:
          type: string
          example: 'sang2@gmail.com'
        password:
          type: string
          example: 'Dueling@123'
      required:
        - email
        - password
    SuccessAuthentication:
      type: object
      properties:
        access_token:
          type: string
          example: '12asddafasdfasdf3'
        refresh_token:
          type: string
          example: 'afasdfawer12131fsd'
    User:
      type: object
      properties:
        _id:
          type: string
          format: MongoId
          example: '664e8c2f26cb8a8ee15fd43c'
        name:
          type: string
          example: 'SangDepTroai'
        email:
          type: string
          example: 'sang2@gmail.com'
        date_of_birth:
          type: string
          format: ISO8601
          example: '1970-01-01T00:00:00.000Z'
        created_at:
          type: string
          format: ISO8601
          example: '2024-05-23T00:22:07.383Z'
        updated_at:
          type: string
          format: ISO8601
          example: '2024-06-06T08:07:03.221Z'
        verify:
          $ref: '#/components/schemas/UserVerifyStatus'
        user_verify:
          type: number
          example: 1
          enum:
            - 0
            - 1
            - 2
        bio:
          type: string
          example: 'Tui la dev quen =))))'
        location:
          type: string
          example: ''
        website:
          type: string
          example: ''
        username:
          type: string
          example: 'Sangdeeptroai123'
        avatar:
          type: string
          example: 'http://localhost:4000/picture.jpg'
        cover_photo:
          type: string
          example: 'http://localhost:4000/picture.jpg'
        twitter_circle:
          type: array
          items:
            type: string
          format: MongoId
          example: ['672a429276c2116755257b04', '672a429276c2116755257b04']
    UserVerifyStatus:
      type: number
      example: 1
      enum: [Unverified, Verified, Banned]
    RegisterReqBody:
      type: object
      properties:
        name:
          type: string
          example: 'SangDepTroai'
        email:
          type: string
          format: email
          example: 'sang2@gmail.com'
        password:
          type: string
          example: 'Dueling@123'
        confirm_password:
          type: string
          example: 'Dueling@123'
        date_of_birth:
          type: string
          format: ISO8601
          example: '1970-01-01T00:00:00.000Z'
      required:
        - name
        - email
        - password
        - confirm_password
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
